// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`with  query should render 1`] = `
<Spin
  indicator={
    <Icon
      spin={true}
      style={
        Object {
          "fontSize": 24,
        }
      }
      type="loading"
    />
  }
  prefixCls="ant-spin"
  size="default"
  spinning={true}
  wrapperClassName=""
/>
`;

exports[`with  query should render 2`] = `
<MockComponent
  fetch={
    [MockFunction] {
      "calls": Array [
        Array [
          "posts",
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": Promise {},
        },
      ],
    }
  }
  items={
    Object {
      "title": Object {
        "tyep": "string",
      },
    }
  }
  query={
    Query {
      "getQueries": [Function],
      "getVairables": [Function],
      "queries": Object {
        "posts": Object {
          "alias": "posts",
          "args": Object {
            "after": "$RANDOM_KEY",
            "before": "$RANDOM_KEY",
            "first": "$RANDOM_KEY",
            "last": "$RANDOM_KEY",
            "orderBy": "$RANDOM_KEY",
            "where": "$RANDOM_KEY",
          },
          "connection": true,
          "declareArgs": Object {
            "$RANDOM_KEY": "PostOrderByInput",
          },
          "fields": Object {
            "id": null,
            "title": null,
          },
          "isPlural": true,
        },
      },
      "schema": Object {
        "posts": Object {
          "items": Object {
            "items": Object {
              "title": Object {
                "type": "string",
              },
            },
            "type": "object",
          },
          "type": "array",
        },
      },
      "toGQL": [Function],
      "updateQueries": [Function],
      "variables": Object {
        "$RANDOM_KEY": Object {},
      },
    }
  }
  refId={
    CannerRefId {
      "_internalArr": Array [
        "posts",
      ],
      "child": [Function],
      "getPathArr": [Function],
      "remove": [Function],
      "toString": [Function],
    }
  }
  rootValue={null}
  showPagination={true}
  subscribe={
    [MockFunction] {
      "calls": Array [
        Array [
          "posts",
          [Function],
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": Object {
            "unsubscribe": [MockFunction],
          },
        },
      ],
    }
  }
  unsubscribe={[MockFunction]}
  value={null}
/>
`;
